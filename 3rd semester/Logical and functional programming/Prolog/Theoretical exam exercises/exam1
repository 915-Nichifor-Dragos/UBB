% ----------------------------------------------------------------------------------------------------------------------------------------------------------
% ex12020 ex 1.2

aux1(S1, H, H) :-
    S1 < H,
    !.
aux1(S1, _, S1).

f([], 0).
f([H|T], S) :-
    f(T, S1),
    aux1(S1, H, S).

% ----------------------------------------------------------------------------------------------------------------------------------------------------------
% ex12020 ex 1.4

g([], []).
g([H|T], [H|S]) :- 
    g(T,S).
g([H|T], S) :-
    H mod 2 =:= 0,
    g(T, S).

gAll(L, R) :-
    findall(X, g(L, X), R).

% f([1,2,3], L) = ?

% The function is non-deterministic because it can execute either
% of the 2nd and 3rd branch when the head of the it is even.
% [1,2,3] => H=1 => g([1,2,3], S)=> g([2,3], [1|S])

% g([2,3], [1|S]) => H=2 => g([3], [1,2|S])
%                        => g([3], [1|S])

% g([3], [1,2|S]) => H=3 => g([], [1,2,3]) => sol [1,2,3]
% g([3], [1|S]) => H=3 => g([], [1,3]) => sol [1,3]
% The function g generates 2 solutions: [1,2,3] and [1,3]

% ----------------------------------------------------------------------------------------------------------------------------------------------------------
% ex22020 ex 2.1 

% insertEveryPosition(i, i, o)
% insertEveryPosition(e - integer, l - list, r - resulted list)
% insertEveryPosition(e, l1 l2...ln) = [e l1 l2...ln] U [l1 U insertEveryPosition(e, l2...ln)]
insertEveryPosition(E, L, [E|L]).
insertEveryPosition(E, [H|T], [H|R]) :-
    insertEveryPosition(E, T, R).

% permutari(i, o)
% permutari(l - list, r - resulted list)
% permutari(l1 l2...ln) = [], if n = 0
%                       = insertEveryPosition(E, permutari(l2...ln)), otherwise
permutari([], []).
permutari([H|T], R) :-
    permutari(T, RN),
    insertEveryPosition(H, RN, R).

% absoluteValue(l1 l2...ln) = true, if n = 0
%                           = absoluteValue(l2...ln), if abs(l1-l2) <= 3
%                           = false, otherwise
absoluteValue([_]).
absoluteValue([H1,H2]) :-
    K is H1 - H2,
    abs(K) =< 3.
absoluteValue([H1,H2|T]) :-
    K is H1 - H2,
    abs(K) =< 3,
    absoluteValue([H2|T]).

% checkAbsoluteValue(l1 l2...ln) = true, l1 U checkAbsoluteValue(l2...ln), if absoluteValue(l1) is true
%                                = checkAbsoluteValue(l2...ln), otherwise
checkAbsoluteValue([], []).
checkAbsoluteValue([H|T], [H|R]) :-
    is_list(H),
    absoluteValue(H),
    !,
    checkAbsoluteValue(T, R).
checkAbsoluteValue([_|T], R) :-
    checkAbsoluteValue(T, R).

% Main with findall predicate.
allPermutations(L, R) :-
    findall(X, permutari(L, X), RP),
    checkAbsoluteValue(RP, R).

