Program id: 0
Execution stack: 
(Ref(int) v1;(Ref(int) v2;(Ref(int) v3;(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))))
Symbol table: 
Output list: 
File table: 
Heap: 
LatchTable: 

Program id: 0
Execution stack: 
Ref(int) v1
(Ref(int) v2;(Ref(int) v3;(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))))
Symbol table: 
Output list: 
File table: 
Heap: 
LatchTable: 

Program id: 0
Execution stack: 
(Ref(int) v2;(Ref(int) v3;(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))))
Symbol table: 
v1 -> (0, int)
Output list: 
File table: 
Heap: 
LatchTable: 

Program id: 0
Execution stack: 
Ref(int) v2
(Ref(int) v3;(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))
Symbol table: 
v1 -> (0, int)
Output list: 
File table: 
Heap: 
LatchTable: 

Program id: 0
Execution stack: 
(Ref(int) v3;(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))))
Symbol table: 
v1 -> (0, int)
v2 -> (0, int)
Output list: 
File table: 
Heap: 
LatchTable: 

Program id: 0
Execution stack: 
Ref(int) v3
(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))
Symbol table: 
v1 -> (0, int)
v2 -> (0, int)
Output list: 
File table: 
Heap: 
LatchTable: 

Program id: 0
Execution stack: 
(int cnt;(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))))
Symbol table: 
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table: 
Heap: 
LatchTable: 

Program id: 0
Execution stack: 
int cnt
(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))
Symbol table: 
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table: 
Heap: 
LatchTable: 

Program id: 0
Execution stack: 
(New(v1, 2);(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))))
Symbol table: 
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table: 
Heap: 
LatchTable: 

Program id: 0
Execution stack: 
New(v1, 2)
(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))
Symbol table: 
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table: 
Heap: 
LatchTable: 

Program id: 0
Execution stack: 
(New(v2, 3);(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))))
Symbol table: 
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table: 
Heap: 
1 -> 2
LatchTable: 

Program id: 0
Execution stack: 
New(v2, 3)
(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))
Symbol table: 
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
Output list: 
File table: 
Heap: 
1 -> 2
LatchTable: 

Program id: 0
Execution stack: 
(New(v3, 4);(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))))
Symbol table: 
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Output list: 
File table: 
Heap: 
1 -> 2
2 -> 3
LatchTable: 

Program id: 0
Execution stack: 
New(v3, 4)
(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))
Symbol table: 
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Output list: 
File table: 
Heap: 
1 -> 2
2 -> 3
LatchTable: 

Program id: 0
Execution stack: 
(newLatch(cnt, ReadHeap(v2));(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100))))))
Symbol table: 
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table: 
Heap: 
1 -> 2
2 -> 3
3 -> 4
LatchTable: 

Program id: 0
Execution stack: 
newLatch(cnt, ReadHeap(v2))
(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))
Symbol table: 
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table: 
Heap: 
1 -> 2
2 -> 3
3 -> 4
LatchTable: 

Program id: 0
Execution stack: 
(Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))));(await(cnt);(print(100);(countDown(cnt);print(100)))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table: 
Heap: 
1 -> 2
2 -> 3
3 -> 4
LatchTable: 
1 -> 3

Program id: 0
Execution stack: 
Fork((WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))))
(await(cnt);(print(100);(countDown(cnt);print(100))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table: 
Heap: 
1 -> 2
2 -> 3
3 -> 4
LatchTable: 
1 -> 3

Program id: 0
Execution stack: 
(await(cnt);(print(100);(countDown(cnt);print(100))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table: 
Heap: 
1 -> 2
2 -> 3
3 -> 4
LatchTable: 
1 -> 3

Program id: 1
Execution stack: 
(WriteHeap(v1, ReadHeap(v1) * 10);(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))))))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table: 
Heap: 
1 -> 2
2 -> 3
3 -> 4
LatchTable: 
1 -> 3

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table: 
Heap: 
1 -> 2
2 -> 3
3 -> 4
LatchTable: 
1 -> 3

Program id: 1
Execution stack: 
WriteHeap(v1, ReadHeap(v1) * 10)
(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table: 
Heap: 
1 -> 2
2 -> 3
3 -> 4
LatchTable: 
1 -> 3

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 3
3 -> 4
LatchTable: 
1 -> 3

Program id: 1
Execution stack: 
(print(ReadHeap(v1));(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 3
3 -> 4
LatchTable: 
1 -> 3

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 3
3 -> 4
LatchTable: 
1 -> 3

Program id: 1
Execution stack: 
print(ReadHeap(v1))
(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 3
3 -> 4
LatchTable: 
1 -> 3

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
File table: 
Heap: 
1 -> 20
2 -> 3
3 -> 4
LatchTable: 
1 -> 3

Program id: 1
Execution stack: 
(countDown(cnt);Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
File table: 
Heap: 
1 -> 20
2 -> 3
3 -> 4
LatchTable: 
1 -> 3

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
File table: 
Heap: 
1 -> 20
2 -> 3
3 -> 4
LatchTable: 
1 -> 3

Program id: 1
Execution stack: 
countDown(cnt)
Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
File table: 
Heap: 
1 -> 20
2 -> 3
3 -> 4
LatchTable: 
1 -> 3

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
File table: 
Heap: 
1 -> 20
2 -> 3
3 -> 4
LatchTable: 
1 -> 2

Program id: 1
Execution stack: 
print(1)
Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
File table: 
Heap: 
1 -> 20
2 -> 3
3 -> 4
LatchTable: 
1 -> 2

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
File table: 
Heap: 
1 -> 20
2 -> 3
3 -> 4
LatchTable: 
1 -> 2

Program id: 1
Execution stack: 
Fork((WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
File table: 
Heap: 
1 -> 20
2 -> 3
3 -> 4
LatchTable: 
1 -> 2

Program id: 1
Execution stack: 
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
File table: 
Heap: 
1 -> 20
2 -> 3
3 -> 4
LatchTable: 
1 -> 2

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
File table: 
Heap: 
1 -> 20
2 -> 3
3 -> 4
LatchTable: 
1 -> 2

Program id: 2
Execution stack: 
(WriteHeap(v2, ReadHeap(v2) * 10);(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
File table: 
Heap: 
1 -> 20
2 -> 3
3 -> 4
LatchTable: 
1 -> 2

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
File table: 
Heap: 
1 -> 20
2 -> 3
3 -> 4
LatchTable: 
1 -> 2

Program id: 2
Execution stack: 
WriteHeap(v2, ReadHeap(v2) * 10)
(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
File table: 
Heap: 
1 -> 20
2 -> 3
3 -> 4
LatchTable: 
1 -> 2

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 4
LatchTable: 
1 -> 2

Program id: 2
Execution stack: 
(print(ReadHeap(v2));(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 4
LatchTable: 
1 -> 2

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 4
LatchTable: 
1 -> 2

Program id: 2
Execution stack: 
print(ReadHeap(v2))
(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 4
LatchTable: 
1 -> 2

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 4
LatchTable: 
1 -> 2

Program id: 2
Execution stack: 
(countDown(cnt);Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 4
LatchTable: 
1 -> 2

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 4
LatchTable: 
1 -> 2

Program id: 2
Execution stack: 
countDown(cnt)
Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 4
LatchTable: 
1 -> 2

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 4
LatchTable: 
1 -> 1

Program id: 2
Execution stack: 
print(2)
Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 4
LatchTable: 
1 -> 1

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 4
LatchTable: 
1 -> 1

Program id: 2
Execution stack: 
Fork((WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt))))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 4
LatchTable: 
1 -> 1

Program id: 2
Execution stack: 
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 4
LatchTable: 
1 -> 1

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 4
LatchTable: 
1 -> 1

Program id: 3
Execution stack: 
(WriteHeap(v3, ReadHeap(v3) * 10);(print(ReadHeap(v3));countDown(cnt)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 4
LatchTable: 
1 -> 1

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 4
LatchTable: 
1 -> 1

Program id: 3
Execution stack: 
WriteHeap(v3, ReadHeap(v3) * 10)
(print(ReadHeap(v3));countDown(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 4
LatchTable: 
1 -> 1

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 40
LatchTable: 
1 -> 1

Program id: 3
Execution stack: 
(print(ReadHeap(v3));countDown(cnt))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 40
LatchTable: 
1 -> 1

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 40
LatchTable: 
1 -> 1

Program id: 3
Execution stack: 
print(ReadHeap(v3))
countDown(cnt)
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 40
LatchTable: 
1 -> 1

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
40
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 40
LatchTable: 
1 -> 1

Program id: 3
Execution stack: 
countDown(cnt)
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
40
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 40
LatchTable: 
1 -> 1

Program id: 0
Execution stack: 
await(cnt)
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
40
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 40
LatchTable: 
1 -> 0

Program id: 3
Execution stack: 
print(3)
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
40
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 40
LatchTable: 
1 -> 0

Program id: 3
Execution stack: 
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
40
3
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 40
LatchTable: 
1 -> 0

Program id: 0
Execution stack: 
(print(100);(countDown(cnt);print(100)))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
40
3
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 40
LatchTable: 
1 -> 0

Program id: 0
Execution stack: 
print(100)
(countDown(cnt);print(100))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
40
3
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 40
LatchTable: 
1 -> 0

Program id: 0
Execution stack: 
(countDown(cnt);print(100))
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
40
3
100
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 40
LatchTable: 
1 -> 0

Program id: 0
Execution stack: 
countDown(cnt)
print(100)
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
40
3
100
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 40
LatchTable: 
1 -> 0

Program id: 0
Execution stack: 
print(0)
print(100)
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
40
3
100
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 40
LatchTable: 
1 -> 0

Program id: 0
Execution stack: 
print(100)
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
40
3
100
0
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 40
LatchTable: 
1 -> 0

Program id: 0
Execution stack: 
Symbol table: 
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Output list: 
20
1
30
2
40
3
100
0
100
File table: 
Heap: 
1 -> 20
2 -> 30
3 -> 40
LatchTable: 
1 -> 0

