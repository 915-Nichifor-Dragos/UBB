Program id: 1
Execution stack: 
(Ref(int) v1;(Ref(int) v2;(int x;(int q;(New(v1, 20);(New(v2, 30);(newLock(x);(Fork((Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))));(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))));(newLock(q);(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))))
Symbol table: 
Output list: 
File table: 
Heap: 
Lock table: 


Program id: 1
Execution stack: 
Ref(int) v1
(Ref(int) v2;(int x;(int q;(New(v1, 20);(New(v2, 30);(newLock(x);(Fork((Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))));(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))));(newLock(q);(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))
Symbol table: 
Output list: 
File table: 
Heap: 
Lock table: 


Program id: 1
Execution stack: 
(Ref(int) v2;(int x;(int q;(New(v1, 20);(New(v2, 30);(newLock(x);(Fork((Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))));(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))));(newLock(q);(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))))
Symbol table: 
v1 -> (0, int)
Output list: 
File table: 
Heap: 
Lock table: 


Program id: 1
Execution stack: 
Ref(int) v2
(int x;(int q;(New(v1, 20);(New(v2, 30);(newLock(x);(Fork((Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))));(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))));(newLock(q);(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))
Symbol table: 
v1 -> (0, int)
Output list: 
File table: 
Heap: 
Lock table: 


Program id: 1
Execution stack: 
(int x;(int q;(New(v1, 20);(New(v2, 30);(newLock(x);(Fork((Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))));(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))));(newLock(q);(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))))
Symbol table: 
v1 -> (0, int)
v2 -> (0, int)
Output list: 
File table: 
Heap: 
Lock table: 


Program id: 1
Execution stack: 
int x
(int q;(New(v1, 20);(New(v2, 30);(newLock(x);(Fork((Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))));(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))));(newLock(q);(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))
Symbol table: 
v1 -> (0, int)
v2 -> (0, int)
Output list: 
File table: 
Heap: 
Lock table: 


Program id: 1
Execution stack: 
(int q;(New(v1, 20);(New(v2, 30);(newLock(x);(Fork((Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))));(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))));(newLock(q);(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))))
Symbol table: 
x -> 0
v1 -> (0, int)
v2 -> (0, int)
Output list: 
File table: 
Heap: 
Lock table: 


Program id: 1
Execution stack: 
int q
(New(v1, 20);(New(v2, 30);(newLock(x);(Fork((Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))));(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))));(newLock(q);(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))
Symbol table: 
x -> 0
v1 -> (0, int)
v2 -> (0, int)
Output list: 
File table: 
Heap: 
Lock table: 


Program id: 1
Execution stack: 
(New(v1, 20);(New(v2, 30);(newLock(x);(Fork((Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))));(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))));(newLock(q);(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))))
Symbol table: 
q -> 0
x -> 0
v1 -> (0, int)
v2 -> (0, int)
Output list: 
File table: 
Heap: 
Lock table: 


Program id: 1
Execution stack: 
New(v1, 20)
(New(v2, 30);(newLock(x);(Fork((Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))));(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))));(newLock(q);(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))
Symbol table: 
q -> 0
x -> 0
v1 -> (0, int)
v2 -> (0, int)
Output list: 
File table: 
Heap: 
Lock table: 


Program id: 1
Execution stack: 
(New(v2, 30);(newLock(x);(Fork((Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))));(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))));(newLock(q);(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))))
Symbol table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (0, int)
Output list: 
File table: 
Heap: 
1 -> 20
Lock table: 


Program id: 1
Execution stack: 
New(v2, 30)
(newLock(x);(Fork((Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))));(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))));(newLock(q);(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))
Symbol table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (0, int)
Output list: 
File table: 
Heap: 
1 -> 20
Lock table: 


Program id: 1
Execution stack: 
(newLock(x);(Fork((Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))));(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))));(newLock(q);(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))))
Symbol table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 


Program id: 1
Execution stack: 
newLock(x)
(Fork((Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))));(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))));(newLock(q);(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))
Symbol table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 


Program id: 1
Execution stack: 
(Fork((Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))));(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))));(newLock(q);(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))))
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> -1


Program id: 1
Execution stack: 
Fork((Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))));(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))))
(newLock(q);(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> -1


Program id: 1
Execution stack: 
(newLock(q);(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))))
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> -1


Program id: 2
Execution stack: 
(Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))));(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x))))
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> -1


Program id: 1
Execution stack: 
newLock(q)
(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> -1


Program id: 2
Execution stack: 
Fork((lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))))
(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> -1


Program id: 1
Execution stack: 
(Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))));((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> -1
2 -> -1


Program id: 2
Execution stack: 
(lock(x);(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x)))
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> -1
2 -> -1


Program id: 3
Execution stack: 
(lock(x);(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x)))
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> -1
2 -> -1


Program id: 1
Execution stack: 
Fork((Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))))
((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> -1
2 -> -1


Program id: 2
Execution stack: 
lock(x)
(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x))
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> -1
2 -> -1


Program id: 3
Execution stack: 
lock(x)
(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> -1
2 -> -1


Program id: 1
Execution stack: 
((no operation);((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> 2
2 -> -1


Program id: 2
Execution stack: 
(WriteHeap(v1, ReadHeap(v1) * 10);unlock(x))
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> 2
2 -> -1


Program id: 3
Execution stack: 
lock(x)
(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> 2
2 -> -1


Program id: 4
Execution stack: 
(Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))));(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q))))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> 2
2 -> -1


Program id: 1
Execution stack: 
(no operation)
((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> 2
2 -> -1


Program id: 2
Execution stack: 
WriteHeap(v1, ReadHeap(v1) * 10)
unlock(x)
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> 2
2 -> -1


Program id: 3
Execution stack: 
lock(x)
(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> 2
2 -> -1


Program id: 4
Execution stack: 
Fork((lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))))
(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 20
2 -> 30
Lock table: 
1 -> 2
2 -> -1


Program id: 1
Execution stack: 
((no operation);((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 200
2 -> 30
Lock table: 
1 -> 2
2 -> -1


Program id: 2
Execution stack: 
unlock(x)
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 200
2 -> 30
Lock table: 
1 -> 2
2 -> -1


Program id: 3
Execution stack: 
lock(x)
(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 200
2 -> 30
Lock table: 
1 -> 2
2 -> -1


Program id: 4
Execution stack: 
(lock(q);(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q)))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 200
2 -> 30
Lock table: 
1 -> 2
2 -> -1


Program id: 5
Execution stack: 
(lock(q);(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q)))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 200
2 -> 30
Lock table: 
1 -> 2
2 -> -1


Program id: 2
Execution stack: 
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 200
2 -> 30
Lock table: 
1 -> 3
2 -> -1


Program id: 1
Execution stack: 
(no operation)
((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 200
2 -> 30
Lock table: 
1 -> 3
2 -> -1


Program id: 3
Execution stack: 
(WriteHeap(v1, ReadHeap(v1) - 1);unlock(x))
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 200
2 -> 30
Lock table: 
1 -> 3
2 -> -1


Program id: 4
Execution stack: 
lock(q)
(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 200
2 -> 30
Lock table: 
1 -> 3
2 -> -1


Program id: 5
Execution stack: 
lock(q)
(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 200
2 -> 30
Lock table: 
1 -> 3
2 -> -1


Program id: 1
Execution stack: 
((no operation);((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 200
2 -> 30
Lock table: 
1 -> 3
2 -> 4


Program id: 3
Execution stack: 
WriteHeap(v1, ReadHeap(v1) - 1)
unlock(x)
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 200
2 -> 30
Lock table: 
1 -> 3
2 -> 4


Program id: 4
Execution stack: 
(WriteHeap(v2, ReadHeap(v2) * 10);unlock(q))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 200
2 -> 30
Lock table: 
1 -> 3
2 -> 4


Program id: 5
Execution stack: 
lock(q)
(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 200
2 -> 30
Lock table: 
1 -> 3
2 -> 4


Program id: 1
Execution stack: 
(no operation)
((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 30
Lock table: 
1 -> 3
2 -> 4


Program id: 3
Execution stack: 
unlock(x)
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 30
Lock table: 
1 -> 3
2 -> 4


Program id: 4
Execution stack: 
WriteHeap(v2, ReadHeap(v2) * 10)
unlock(q)
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 30
Lock table: 
1 -> 3
2 -> 4


Program id: 5
Execution stack: 
lock(q)
(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 30
Lock table: 
1 -> 3
2 -> 4


Program id: 3
Execution stack: 
Symbol table: 
q -> 0
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 300
Lock table: 
1 -> -1
2 -> 4


Program id: 1
Execution stack: 
((no operation);(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 300
Lock table: 
1 -> -1
2 -> 4


Program id: 4
Execution stack: 
unlock(q)
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 300
Lock table: 
1 -> -1
2 -> 4


Program id: 5
Execution stack: 
lock(q)
(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 300
Lock table: 
1 -> -1
2 -> 4


Program id: 4
Execution stack: 
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 300
Lock table: 
1 -> -1
2 -> 5


Program id: 1
Execution stack: 
(no operation)
(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 300
Lock table: 
1 -> -1
2 -> 5


Program id: 5
Execution stack: 
(WriteHeap(v2, ReadHeap(v2) + 5);unlock(q))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 300
Lock table: 
1 -> -1
2 -> 5


Program id: 1
Execution stack: 
(lock(x);(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 300
Lock table: 
1 -> -1
2 -> 5


Program id: 5
Execution stack: 
WriteHeap(v2, ReadHeap(v2) + 5)
unlock(q)
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 300
Lock table: 
1 -> -1
2 -> 5


Program id: 1
Execution stack: 
lock(x)
(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 305
Lock table: 
1 -> -1
2 -> 5


Program id: 5
Execution stack: 
unlock(q)
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 305
Lock table: 
1 -> -1
2 -> 5


Program id: 5
Execution stack: 
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 305
Lock table: 
1 -> 1
2 -> -1


Program id: 1
Execution stack: 
(print(ReadHeap(v1));(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q)))))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 305
Lock table: 
1 -> 1
2 -> -1


Program id: 1
Execution stack: 
print(ReadHeap(v1))
(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
File table: 
Heap: 
1 -> 199
2 -> 305
Lock table: 
1 -> 1
2 -> -1


Program id: 1
Execution stack: 
(unlock(x);(lock(q);(print(ReadHeap(v2));unlock(q))))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
199
File table: 
Heap: 
1 -> 199
2 -> 305
Lock table: 
1 -> 1
2 -> -1


Program id: 1
Execution stack: 
unlock(x)
(lock(q);(print(ReadHeap(v2));unlock(q)))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
199
File table: 
Heap: 
1 -> 199
2 -> 305
Lock table: 
1 -> 1
2 -> -1


Program id: 1
Execution stack: 
(lock(q);(print(ReadHeap(v2));unlock(q)))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
199
File table: 
Heap: 
1 -> 199
2 -> 305
Lock table: 
1 -> -1
2 -> -1


Program id: 1
Execution stack: 
lock(q)
(print(ReadHeap(v2));unlock(q))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
199
File table: 
Heap: 
1 -> 199
2 -> 305
Lock table: 
1 -> -1
2 -> -1


Program id: 1
Execution stack: 
(print(ReadHeap(v2));unlock(q))
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
199
File table: 
Heap: 
1 -> 199
2 -> 305
Lock table: 
1 -> -1
2 -> 1


Program id: 1
Execution stack: 
print(ReadHeap(v2))
unlock(q)
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
199
File table: 
Heap: 
1 -> 199
2 -> 305
Lock table: 
1 -> -1
2 -> 1


Program id: 1
Execution stack: 
unlock(q)
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
199
305
File table: 
Heap: 
1 -> 199
2 -> 305
Lock table: 
1 -> -1
2 -> 1


Program id: 1
Execution stack: 
Symbol table: 
q -> 2
x -> 1
v1 -> (1, int)
v2 -> (2, int)
Output list: 
199
305
File table: 
Heap: 
1 -> 199
2 -> 305
Lock table: 
1 -> -1
2 -> -1


